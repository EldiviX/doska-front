import '../../styles/style.css';
import './style.css';
import Button from '@mui/material/Button';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Cookies from 'js-cookie';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import TextField from "@mui/material/TextField";
import image from '../../assets/img.jpg'
import axios from 'axios'

export default function Create() {
    const [title, setTitle] = useState('');
    const [text, setText] = useState('');
    const [type, setType] = useState('');
    const [category, setCategory] = useState('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    const [price, setPrice] = useState('');
    const [phone, setPhone] = useState('');
    const [location, setLocation] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [imageUrl, setImageUrl] = useState('')

    const navigateTo = useNavigate();
    const token = localStorage.getItem('token')

    const createAds = async () => {
        try {
            console.log('@'+imageUrl);
            const response = await fetch('https://doska-ads.ru:8443/ads', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    "title": title,
                    "text": text,
                    "category": category,
                    "price": price,
                    "phone": phone,
                    "type": type,
                    "location": location,
                    "imageUrl": imageUrl,
                    "verified": false
                })
            });

            const data = {
                "title": title,
                "text": text,
                "category": category,
                "price": price,
                "phone": phone,
                "type": type,
                "location": location,
                "imageUrl": imageUrl
            };

            const jsonData = JSON.stringify(data);
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ!!!!!!!!!!!:', jsonData);

            if (response.ok) {
                const responseData = await response.json();
                console.log(responseData);
                setErrorMessage('');

                navigateTo('/');
                alert('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
            } else if (response.status === 400) {
                const responseData = await response.json();
                setErrorMessage(responseData[0].msg);

                console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseData[0].msg);
            } else if (response.status === 500 || response.status === 404 || response.status === 403) {
                const responseData = await response.json();
                setErrorMessage(responseData.message);

                console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseData.message);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        }
    };

    const handleChangeFile = async (event) => {
        try {
            const formData = new FormData();
            const file = event.target.files[0];
            formData.append('image', file);
            const { data } = await axios.post('https://doska-ads.ru:8443/upload', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                    'Authorization': 'Bearer ' + token
                }
            });
            console.log(data.url);
            setImageUrl(data.url);
;
        } catch (err) {
            console.log(err);
        }
    }

    return (
        <div className="container" style={{flexDirection: "row"}}>
            <div className="create">
                <div className="create-cont">

                    <div className="create-title">–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</div>
                    <div className="create-line">
                        <div className="create-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</div>
                        <TextField 
                            className='create-input'
                            maxLength={50}
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            inputProps={{
                                style: { paddingTop: '5px', paddingBottom: '5px', paddingLeft: '10px', paddingRight: '10px', width: '535px' },
                            }}
                        />
                    </div>
                    <div className="create-line">
                        <label className="create-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <Select
                            style={{width: '160px'}}
                            labelId="select-type"
                            id="select-type"
                            size='small'
                            value={category}
                            onChange={(e) => setCategory(e.target.value)}
                        >
                            <MenuItem value={'–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}>‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</MenuItem>
                            <MenuItem value={'–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'}>üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</MenuItem>
                            <MenuItem value={'–í–∞–∫–∞–Ω—Å–∏–∏'}>üíº –í–∞–∫–∞–Ω—Å–∏–∏</MenuItem>
                            <MenuItem value={'–ñ–∏–≤–æ—Ç–Ω—ã–µ'}>üê∂ –ñ–∏–≤–æ—Ç–Ω—ã–µ</MenuItem>
                            <MenuItem value={'–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'}>üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞</MenuItem>
                            <MenuItem value={'–û–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã'}>üëï –û–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã</MenuItem>
                            <MenuItem value={'–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –∏ —á–∞—Å—ã'}>‚åö –Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –∏ —á–∞—Å—ã</MenuItem>
                            <MenuItem value={'–ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'}>üé¨ –ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</MenuItem>
                            <MenuItem value={'–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π'}>üë∂ –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π</MenuItem>
                            <MenuItem value={'–ö–Ω–∏–≥–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è'}>üìö –ö–Ω–∏–≥–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è</MenuItem>
                            <MenuItem value={'–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç'}>üõ†Ô∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç</MenuItem>
                            <MenuItem value={'–ê–≤—Ç–æ –∏ –º–æ—Ç–æ'}>üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ</MenuItem>
                            <MenuItem value={'–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è'}>üçé –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è</MenuItem>
                        </Select>
                    </div>
                    <div className="create-line">
                        <label className="create-label">–¢–∏–ø</label>
                        <Select
                            style={{width: '120px'}}
                            labelId="select-type"
                            id="select-type"
                            size='small'
                            value={type}
                            onChange={(e) => setType(e.target.value)}
                        >
                            <MenuItem value={'–ü—Ä–æ–¥–∞–∂–∞'}>–ü—Ä–æ–¥–∞–∂–∞</MenuItem>
                            <MenuItem value={'–ü–æ–∫—É–ø–∫–∞'}>–ü–æ–∫—É–ø–∫–∞</MenuItem>
                            <MenuItem value={'–£—Å–ª—É–≥–∞'}>–£—Å–ª—É–≥–∞</MenuItem>
                        </Select>
                    </div>
                    <div className="create-line" style={{alignItems: 'start'}}>
                        <label className="create-label" style={{marginTop: '5px'}}>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea value={text} onChange={(e) => setText(e.target.value)} className="create-text" id="d" maxlength="3000" rows="10" haserror="false"></textarea>
                    </div>
                    <div className="create-line">
                        <label className="create-label">–¶–µ–Ω–∞</label>
                        <TextField 
                            className='create-input'
                            maxLength={50}
                            value={price}
                            onChange={(e) => setPrice(e.target.value)}
                            inputProps={{
                                style: { paddingTop: '5px', paddingBottom: '5px', paddingLeft: '10px', paddingRight: '10px', width: '120px' },
                            }}
                        />
                        <div style={{marginLeft: '5px', color: "#333333"}}>‚ÇΩ</div>
                    </div>
                    <div className="create-line">
                        <label className="create-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                        <div style={{color: "#333333", marginRight: '3px'}}>+7</div>
                        <TextField 
                            className='create-input'
                            maxLength={50}
                            value={phone}
                            onChange={(e) => setPhone(e.target.value)}
                            inputProps={{
                                style: { paddingTop: '5px', paddingBottom: '5px', paddingLeft: '10px', paddingRight: '10px', width: '93px', paddingLeft: '2px',  maxLength: 10 },
                            }}
                        />
                    </div>
                    <div className="create-line">
                        <label className="create-label">–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</label>
                        <TextField 
                            className='create-input'
                            maxLength={50}
                            multiple
                            rows={10}
                            value={location}
                            onChange={(e) => setLocation(e.target.value)}
                            inputProps={{
                                style: { paddingTop: '5px', paddingBottom: '5px', paddingLeft: '10px', paddingRight: '10px', width: '250px',  maxLength: 10 },
                            }}
                        />
                    </div>
                    <div className="create-line" style={{marginBottom: '0px'}}>
                        <label className="create-label"></label>
                        {errorMessage && <div style={{ color: '#d32f2f', fontFamily: 'Arial', fontSize: '14px', marginBottom: '10px', marginTop: '-10px'}}>{errorMessage}</div>}
                    </div> 

                    <div className="create-line" style={{marginBottom: '0px'}}>
                        <label className="create-label"></label>
                        <Button onClick={() => createAds()} variant="contained">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
                    </div>
                </div>
                <div className='create-mini'>
                    <input
                        accept="image/*"
                        style={{ display: 'none' }}
                        id="raised-button-file"
                        multiple
                        type="file"
                        onChange={handleChangeFile}
                    />
                    <div style={{position: 'absolute', width: '300px', height: '210px', margin: '0 auto', borderRadius: '8px' }}>
                    <img src={imageUrl ? `https://doska-ads.ru:8443${imageUrl}` : image}  style={{width: '100%', height: '100%', objectFit: 'cover' }} />
                    </div>
                    {/* <img id="uploaded-image" src="#" alt="Uploaded Image" style={{zIndex:'5', position: 'absolute', width: '300px', height: '210px', margin: '0 auto', borderRadius: '8px' }} /> */}
                    <label htmlFor="raised-button-file" style={{width: '180px', margin: '0 auto', marginTop: '215px'}}>
                        <Button variant="text" component="span">
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
                        </Button>
                    </label>
                </div>
            </div>
        </div>
    )
}